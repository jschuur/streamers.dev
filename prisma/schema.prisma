datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Channel {
  id                      Int           @default(autoincrement()) @id
  twitchId                String        @unique
  name                    String        @unique
  displayName             String        @unique
  fullName                String?
  team                    String?
  description             String
  country                 String?
  country2                String?
  countries               String[]
  isLive                  Boolean       @default(false)
  isHidden                Boolean       @default(false)
  isPaused                Boolean       @default(false)
  alwaysCoding            Boolean       @default(false)

  topics                  String[]

  type                    String?
  broadcasterType         String
  channelType             ChannelType   @default(USER)
  creationDate            DateTime
  profilePictureUrl       String
  views                   Int

  lastOnline              DateTime?
  latestStreamTitle       String?
  latestStreamStartedAt   DateTime?
  latestStreamViewers     Int?
  latestStreamPeakViewers Int?
  latestStreamLanguage    String?
  latestStreamGameName    String?
  latestStreamTags        String[]
  latestStreamTwitchTags  String[]

  allStreamTags           String[]

  // TODO: Create Links model
  homepage                String?
  youtube                 String?
  twitter                 String?
  github                  String?
  discord                 String?
  instagram               String?

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

enum ChannelType {
  USER
  BRAND
  SHOW
  COLLABORATION
}

model Snapshot {
  id                      Int           @default(autoincrement()) @id
  timeStamp               DateTime      @unique
  peakLiveCodingViewers   Int?
  peakLiveCodingChannels  Int?
  totalLiveViewers        Int?
  totalLiveChannels       Int?
  trackedChannels         Int?
}

model Queue {
  id                      Int           @default(autoincrement()) @id
  twitchId                String        @unique
  name                    String
  views                   Int?
  viewers                 Int?
  title                   String?
  language                String?
  tag                     String?
  status                  QueueStatus   @default(PENDING)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

enum QueueStatus {
  PENDING
  ADDED
  PAUSED
  WONTADD
  GAMEDEV
  HIDDEN
}

model Keyword {
  id                      Int           @unique @default(autoincrement()) @id
  tag                     String
  keywords                String[]
  slug                    String?
}

// model Stream {
//   userId
//   title
//   type
//   gameName
//   gameId
//   viewerCount
//   startedAt
//   language
// }

// Next Auth models: https://next-auth.js.org/adapters/prisma
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}